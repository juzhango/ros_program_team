#include "ros/ros.h"
#include "std_msgs/String.h"
#include "sensor_msgs/LaserScan.h"

int main(int argc, char **argv)
{
  ros::init(argc, argv, "scan_node");
  ros::NodeHandle nh;

  ros::Publisher chatter_pub = nh.advertise<std_msgs::String>("chatter", 1000);
  ros::Publisher scan_pub = nh.advertise<sensor_msgs::LaserScan>("/test/scan", 1000);

  sensor_msgs::LaserScan scan_msg;
  std::vector<float>  ranges = {2.080000162124634, 2.114000082015991, 2.1560001373291016, 2.193000078201294, 2.2340002059936523, 2.2340002059936523, 1.7370001077651978, 1.6180000305175781, 1.6070001125335693, 1.633000135421753, 1.7600001096725464, 2.057000160217285, 2.1530001163482666, 2.2890000343322754, 0.5960000157356262, 1.9840000867843628, 1.9720001220703125, 0.6760000586509705, 0.9230000376701355, 0.909000039100647, 0.9170000553131104, 0.893000066280365, 0.8870000243186951, 0.8850000500679016, 0.8870000243186951, 0.9180000424385071, 1.0860000848770142, 1.2710000276565552, 1.318000078201294, 0.9270000457763672, 1.7710000276565552, 1.7610000371932983, 1.75600004196167, 1.7980000972747803, 2.195000171661377, 2.190000057220459, 2.50600004196167, 2.511000156402588, 2.504000186920166, 2.494000196456909, 2.3470001220703125, 2.4670000076293945, 2.4800000190734863, 2.4720001220703125, 2.436000108718872, 2.42900013923645, 2.438000202178955, 2.4700000286102295, 2.180000066757202, 1.3630000352859497, 1.2390000820159912, 1.2380000352859497, 1.255000114440918, 2.5410001277923584, 2.558000087738037, 2.559000015258789, 2.561000108718872, 2.572000026702881, 2.5810000896453857, 2.564000129699707, 2.5330002307891846, 2.5280001163482666, 2.552000045776367, 2.557000160217285, 2.614000082015991, 2.634000062942505, 2.7230000495910645, 4.741000175476074, 4.779000282287598, 4.818000316619873, 4.855000019073486, 4.898000240325928, 4.933000087738037, 4.910000324249268, 5.946000099182129, 6.00100040435791, 6.064000129699707, 6.124000072479248, 6.146000385284424, 6.2310004234313965, 5.993000507354736, 6.2960004806518555, 0.0020000000949949026, 0.0020000000949949026, 0.0020000000949949026, 3.5840001106262207, 0.0020000000949949026, 3.4790000915527344, 3.4010002613067627, 3.3510000705718994, 3.4600002765655518, 3.3370001316070557, 3.2830002307891846, 3.2320001125335693, 3.181000232696533, 3.139000177383423, 3.0980000495910645, 3.1020002365112305, 3.010000228881836, 2.955000162124634, 3.636000156402588, 3.621000289916992, 3.817000150680542, 3.56000018119812, 3.4840002059936523, 3.4870002269744873, 3.7200002670288086, 3.686000108718872, 3.6570000648498535, 3.628000259399414, 3.5990002155303955, 3.57200026512146, 3.5410001277923584, 3.5260002613067627, 3.506000280380249, 3.4780001640319824, 3.4600002765655518, 3.43500018119812, 3.4200000762939453, 3.4080002307891846, 3.389000177383423, 3.374000072479248, 3.364000082015991, 3.2940001487731934, 3.2800002098083496, 3.2680001258850098, 3.263000249862671, 3.1130001544952393, 3.1100001335144043, 3.1010000705718994, 3.1120002269744873, 3.251000165939331, 3.248000144958496, 3.252000093460083, 3.3030002117156982, 3.1570000648498535, 3.1570000648498535, 3.31600022315979, 5.3580002784729, 5.359000205993652, 5.359000205993652, 5.36400032043457, 5.372000217437744, 5.375000476837158, 5.390000343322754, 5.398000240325928, 5.13200044631958, 5.081000328063965, 5.0, 4.994000434875488, 5.075000286102295, 5.136000156402588, 5.563000202178955, 5.595000267028809, 0.0020000000949949026, 3.6550002098083496, 4.628000259399414, 4.111000061035156, 4.064000129699707, 3.9160001277923584, 3.9640002250671387, 3.894000291824341, 3.126000165939331, 3.118000030517578, 2.5310001373291016, 2.8420002460479736, 2.6450002193450928, 2.2780001163482666, 2.2110002040863037, 2.1740000247955322, 0.0020000000949949026, 2.0950000286102295, 3.2170002460479736, 4.808000087738037, 4.697000026702881, 2.752000093460083, 2.7160000801086426, 2.7170002460479736, 2.7190001010894775, 4.64900016784668, 0.0020000000949949026, 0.0, 0.0, 2.201000213623047, 2.0490000247955322, 2.0160000324249268, 2.0400002002716064, 2.062000036239624, 2.0260000228881836, 1.998000144958496, 2.0970001220703125, 2.111999988555908, 2.067000150680542, 3.0890002250671387, 3.075000047683716, 3.1570000648498535, 3.258000135421753, 3.4040000438690186, 6.267000198364258, 6.214000225067139, 6.14900016784668, 1.3200000524520874, 1.3030000925064087, 5.958000183105469, 5.939000129699707, 2.633000135421753, 2.5990002155303955, 1.312000036239624, 1.3070000410079956, 1.3040000200271606, 1.2920000553131104, 1.2280000448226929, 1.2200000286102295, 1.2190001010894775, 1.222000002861023, 1.221000075340271, 1.222000002861023, 1.2330000400543213, 0.24000000953674316, 0.2840000092983246, 0.27400001883506775, 0.26500001549720764, 0.055000003427267075, 0.21400001645088196, 0.22200001776218414, 0.22100001573562622, 0.2240000069141388, 0.32200002670288086, 0.23100000619888306, 0.23200000822544098, 0.23400001227855682, 0.21400001645088196, 0.2160000056028366, 0.22100001573562622, 0.21800000965595245, 0.22100001573562622, 0.21900001168251038, 0.22500000894069672, 0.23100000619888306, 0.2330000102519989, 0.23400001227855682, 0.23900000751018524, 0.23500001430511475, 0.23500001430511475, 0.22700001299381256, 0.21700000762939453, 0.21800000965595245, 0.2120000123977661, 0.25699999928474426, 0.2160000056028366, 0.21400001645088196, 0.21800000965595245, 0.2120000123977661, 0.21300001442432404, 0.2160000056028366, 0.22300000488758087, 0.23100000619888306, 0.23200000822544098, 0.23100000619888306, 0.2370000183582306, 0.23500001430511475, 0.23100000619888306, 0.3450000286102295, 0.2540000081062317, 0.2770000100135803, 0.4220000207424164, 0.2980000078678131, 0.3020000159740448, 0.22200001776218414, 0.2670000195503235, 0.28600001335144043};
  std::vector<float>  intensities = {10623.0, 10331.0, 10264.0, 10055.0, 9990.0, 7082.0, 8523.0, 11964.0, 12032.0, 11690.0, 8606.0, 7881.0, 6538.0, 7474.0, 7184.0, 10937.0, 10715.0, 8984.0, 11635.0, 11960.0, 34655.0, 36673.0, 37047.0, 36936.0, 36515.0, 34229.0, 12973.0, 11617.0, 11068.0, 8502.0, 10003.0, 10696.0, 11321.0, 10067.0, 10491.0, 10971.0, 7414.0, 7984.0, 8289.0, 8279.0, 12362.0, 8449.0, 8627.0, 8695.0, 7107.0, 7487.0, 7783.0, 7827.0, 9746.0, 11668.0, 13144.0, 13086.0, 13318.0, 6768.0, 7064.0, 6948.0, 6709.0, 6647.0, 6785.0, 7629.0, 5942.0, 5488.0, 4909.0, 4948.0, 5434.0, 5300.0, 33183.0, 7172.0, 7430.0, 7148.0, 7215.0, 6928.0, 6859.0, 7483.0, 8565.0, 8237.0, 8420.0, 8167.0, 8334.0, 8191.0, 6571.0, 7561.0, 0.0, 0.0, 0.0, 2803.0, 0.0, 2769.0, 2631.0, 6886.0, 2900.0, 8640.0, 9825.0, 9137.0, 9317.0, 9271.0, 8593.0, 7210.0, 9766.0, 10225.0, 8896.0, 8603.0, 7904.0, 7949.0, 9675.0, 8494.0, 6773.0, 6810.0, 6869.0, 6465.0, 6710.0, 6804.0, 7094.0, 6930.0, 6882.0, 7368.0, 7561.0, 7399.0, 7361.0, 7807.0, 7897.0, 7470.0, 7468.0, 8529.0, 8715.0, 9481.0, 8739.0, 9637.0, 9330.0, 10129.0, 9734.0, 10564.0, 11101.0, 10494.0, 37624.0, 10177.0, 10368.0, 32806.0, 11708.0, 9620.0, 8932.0, 8509.0, 8646.0, 8909.0, 8280.0, 8217.0, 7107.0, 8025.0, 7643.0, 7541.0, 7268.0, 7454.0, 6454.0, 5469.0, 0.0, 2708.0, 3376.0, 4618.0, 5273.0, 5757.0, 6277.0, 7261.0, 4188.0, 4289.0, 3157.0, 2963.0, 6410.0, 3363.0, 3755.0, 4540.0, 0.0, 3937.0, 5164.0, 7009.0, 7060.0, 8723.0, 9784.0, 9857.0, 6017.0, 4508.0, 0.0, 0.0, 0.0, 6974.0, 7368.0, 7695.0, 6246.0, 7592.0, 6622.0, 7915.0, 6842.0, 7222.0, 5028.0, 3891.0, 3196.0, 4404.0, 4813.0, 4823.0, 2949.0, 3362.0, 3522.0, 5975.0, 6880.0, 2980.0, 3204.0, 3443.0, 5555.0, 12367.0, 12975.0, 13339.0, 12852.0, 7650.0, 7982.0, 8200.0, 7382.0, 7675.0, 7866.0, 7296.0, 7789.0, 8588.0, 8953.0, 8936.0, 5792.0, 8949.0, 9370.0, 10896.0, 11288.0, 16876.0, 12235.0, 12612.0, 12572.0, 12757.0, 13467.0, 13441.0, 13426.0, 12820.0, 12687.0, 12682.0, 12405.0, 12436.0, 12102.0, 12172.0, 11901.0, 11954.0, 11587.0, 9161.0, 8941.0, 9422.0, 12768.0, 9556.0, 8424.0, 8884.0, 8677.0, 8357.0, 7797.0, 8004.0, 8110.0, 7555.0, 10481.0, 10754.0, 10550.0, 7348.0, 34276.0, 35461.0, 35595.0, 33009.0, 7042.0, 5984.0, 7855.0, 6863.0, 6432.0};
  scan_msg.ranges = ranges;
  scan_msg.intensities = intensities;
  scan_msg.angle_min = -2.35619449615;
  scan_msg.angle_max = 2.35619449615;
  ros::Rate loop_rate(1);
  while (ros::ok())
  {
    std_msgs::String msg;
    msg.data = "hello world";

    chatter_pub.publish(msg);
    scan_pub.publish(scan_msg);
    ros::spinOnce();

    loop_rate.sleep();
  }

  return 0;
}
